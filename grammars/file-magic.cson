name: "File Magic"
scopeName: "source.file-magic"
fileTypes: [
	"apache2/magic"
	"magic/Header"
	"magic/Localstuff"
]
patterns: [include: "#main"]

repository:
	main:
		patterns: [
			{include: "#comment"}
			{include: "#escape"}
			{include: "#offset"}
			{include: "#functions"}
			{include: "#operator"}
			{include: "#test"}
			{include: "#number"}
			{include: "#dataType"}
		]
	
	
	# Comment lines
	comment:
		name: "comment.line.number-sign.file-magic"
		begin: "^#"
		end:   "$"
		beginCaptures: 0: "punctuation.definition.comment.file-magic"


	escape:
		patterns: [
			{match: "\\\\x[A-Fa-f0-9]{2}", name: "constant.character.escape.hex.file-magic"}
			{match: "\\\\[0-8]{3}",        name: "constant.character.escape.octal.file-magic"}
			{match: "\\\\.",               name: "constant.character.escape.file-magic"}
		]


	# :!type statements
	functions:
		patterns: [{
			name: "meta.function-call.file-magic"
			match: "^(!:strength)\\s+([-+*/])\\s+(-?0x[A-Fa-f0-9]+|-?\\d+)"
			captures:
				1: name: "entity.name.function.file-magic"
				2: name: "keyword.operator.arithmetic.file-magic"
				3: patterns: [include: "#number"]
		},{
			name: "meta.function-call.file-magic"
			match: "^(!:(?:apple|mime|ext))\\s+(\\S+)(?:\\s+((#).*))?"
			captures:
				1: name: "entity.name.function.file-magic"
				2: name: "string.quoted.double.file-magic"
				3: name: "comment.line.number-sign.file-magic"
				4: name: "punctuation.definition.comment.file-magic"
		},{
			name: "entity.name.function.file-magic"
			match: "^(!:[a-z]+)(?=\\s|$)"
		}]
		

	# Numeric literals
	number:
		patterns: [
			{match: "-?0x[A-Fa-f0-9]+", name: "constant.numeric.hex.file-magic"}
			{match: "-?0\\d+",          name: "constant.numeric.octal.file-magic"}
			{match: "-?\\d+",           name: "constant.numeric.integer.byte-offset.file-magic"}
		]


	# Byte offset
	offset:
		name: "meta.offset.file-magic"
		match: """(?x)
			^(>+&?)
			(\\()
			(&?)
			(-?0x[A-Fa-f0-9]+|-?\\d+)
			(?:
				(\\.)
				([BISLbisl])
			)?
			([-+*/])?
			(?:
				(-?0x[A-Fa-f0-9]+|-?\\d+)
				|
				(\\()
				(-?0x[A-Fa-f0-9]+|-?\\d+)
				(\\))
			)?
			(\\))
		"""
		captures:
			1:  name: "keyword.operator.offset.file-magic"
			2:  name: "punctuation.section.bracket.round.begin.file-magic"
			3:  name: "keyword.operator.offset.file-magic"
			4:  patterns: [include: "#number"]
			5:  name: "punctuation.delimiter.specifier.file-magic"
			6:  name: "constant.language.specifier.file-magic"
			7:  name: "keyword.operator.arithmetic.file-magic"
			8:  patterns: [include: "#number"]
			9:  name: "punctuation.section.bracket.round.begin.file-magic"
			10: patterns: [include: "#number"]
			11: name: "punctuation.section.bracket.round.end.file-magic"
			12: name: "punctuation.section.bracket.round.end.file-magic"


	# Different types of data to test
	test:
		patterns: [{
			# Ad-hoc/file-specific patches
			name: "meta.test.$1-type.file-magic"
			match: """(?x)
				(?# Magdir/vacuum-cleaner 1.1 2015/11/1)
				(?<=\\d)
				\\s+ (lelong)
				\\s  ([<=>&^~!])(-?\\d+)
				\\s* $ """
			captures:
				1: name: "entity.type.$1-test.file-magic"
				2: name: "keyword.operator.logical.file-magic"
				3: patterns: [include: "#number"]
		},{
			# Dummy tests which match anything
			name: "meta.test.$1-type.file-magic"
			match: "(?<=[\\t ])(clear|default)((?=\\/)\\S+)?\\s*(?:(x)?\\s*)?$"
			captures:
				1: name: "entity.type.$1-test.file-magic"
				2: patterns: [include: "#testFlags"]
				3: name: "keyword.operator.wildcard.file-magic"
		},{
			# String/Search: Embed #escapes only
			name: "meta.test.$1-type.file-magic"
			match: "(?<=[\\t ])(search|string)((?=\\/)\\S+)?\\s+([<=>&^~!])?((?:[^\\s\\\\]|\\\\.)+)"
			captures:
				1: name: "entity.type.$1-test.file-magic"
				2: patterns: [include: "#testFlags"]
				3: name: "keyword.operator.logical.file-magic"
				4: name: "variable.parameter.$1-test.file-magic", patterns: [include: "#escape"]
		},{
			# Regex: Embed #escapes + source.regexp
			name: "meta.test.$1-type.file-magic"
			match: "(?<=[\\t ])(regex)((?=\\/)\\S+)?\\s+([<=>&^~!])?((?:[^\\s\\\\]|\\\\.)+)"
			captures:
				1: name: "entity.type.$1-test.file-magic"
				2: patterns: [include: "#testFlags"]
				3: name: "keyword.operator.logical.file-magic"
				4: name: "variable.parameter.$1-test.file-magic", patterns: [
					{include: "source.regexp"}
					{include: "#escape"}
				]
		},{
			# Everything else
			name: "meta.test.$1-type.file-magic"
			match: """(?x) (?<=\\t|\\x20)
				
				(?# Type of test being performed)
				(u?(?:byte|short|long|quad|float|double|string|pstring|date|qdate|ldate
				|qldate|qwdate|beid3|beshort|belong|bequad|befloat|bedouble|bedate|beqdate
				|beldate|beqldate|beqwdate|bestring16|leid3|leshort|lelong|lequad|lefloat
				|ledouble|ledate|leqdate|leldate|leqldate|leqwdate|lestring16|melong|medate
				|meldate)|clear|default|indirect|name|regex|search|use)
				
				(?# Modifier flags)
				((?=\\/)\\S+)?
				
				(?# Value column)
				(?:
					\\s+
					([<=>&^~!])?
					( (x(?=\\s|$)) | ((?:[^\\s\\\\]|\\\\.)+) )
				)?
			"""
			captures:
				1: name: "entity.type.data-test.file-magic"
				2: patterns: [include: "#testFlags"]
				3: name: "keyword.operator.logical.file-magic"
				4: name: "variable.parameter.data-test.file-magic"
				5: name: "keyword.operator.wildcard.file-magic"
				6: patterns: [
					{include: "#number"}
					{include: "#escape"}
				]
		},{
			match: "(?<![^\\\\]\\\\)\\s+((?:[^\\s\\\\]|\\\\.| (?=\\S))+)\\s*$"
			captures:
				1:
					name: "string.quoted.double.file-magic"
					patterns: [
						{include: "source.c#string_placeholder"}
						{include: "#escape"}
					]
		}]
	
	
	# Modifier flags for type specifiers
	testFlags:
		patterns: [
			{name: "punctuation.separator.flags.file-magic", match: "/"}
			{name: "storage.modifier.flag.file-magic", match: "[BCHJLTWbchlstw]+"}
			{include: "#number"}
			{include: "#escape"}
			{include: "#operator"}
		]

	operator:
		name: "keyword.operator.logical.file-magic"
		match: "[=<>&^~!]"
