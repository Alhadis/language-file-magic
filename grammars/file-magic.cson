name: "File Magic"
scopeName: "text.file-magic"
fileTypes: [
	"apache2/magic"
	"magic/Header"
	"magic/Localstuff"
]
patterns: [include: "#main"]

repository:
	main:
		patterns: [
			{include: "#comment"}
			{include: "#escape"}
			{include: "#offset"}
			{include: "#operator"}
			{include: "#test"}
			{include: "#number"}
			{include: "#dataType"}
		]
	
	
	# Comment lines
	comment:
		name: "comment.line.number-sign.file-magic"
		begin: "^#"
		end:   "$"
		beginCaptures: "punctuation.definition.comment.file-magic"


	escape:
		patterns: [
			{match: "\\\\x[A-Fa-f0-9]{2}", name: "constant.character.escape.hex.file-magic"}
			{match: "\\\\[0-8]{3}",        name: "constant.character.escape.octal.file-magic"}
			{match: "\\\\.",               name: "constant.character.escape.file-magic"}
		]

		

	# Numeric literals
	number:
		patterns: [
			{match: "-?0x[A-Fa-f0-9]+", name: "constant.numeric.hex.file-magic"}
			{match: "-?0\\d+",          name: "constant.numeric.octal.file-magic"}
			{match: "-?\\d+",           name: "constant.numeric.integer.byte-offset.file-magic"}
		]


	# Byte offset
	offset:
		name: "meta.offset.file-magic"
		match: """(?x)
			^(>+&?)
			(\\()
			(&?)
			(-?0x[A-Fa-f0-9]+|-?\\d+)
			(?:
				(\\.)
				([BISLbisl])
			)?
			([-+*/])?
			(?:
				(-?0x[A-Fa-f0-9]+|-?\\d+)
				|
				(\\()
				(-?0x[A-Fa-f0-9]+|-?\\d+)
				(\\))
			)?
			(\\))
		"""
		captures:
			1:  name: "keyword.operator.offset.file-magic"
			2:  name: "punctuation.section.bracket.round.begin.file-magic"
			3:  name: "keyword.operator.offset.file-magic"
			4:  patterns: [include: "#number"]
			5:  name: "punctuation.delimiter.specifier.file-magic"
			6:  name: "constant.language.specifier.file-magic"
			7:  name: "keyword.operator.arithmetic.file-magic"
			8:  patterns: [include: "#number"]
			9:  name: "punctuation.section.bracket.round.begin.file-magic"
			10: patterns: [include: "#number"]
			11: name: "punctuation.section.bracket.round.end.file-magic"
			12: name: "punctuation.section.bracket.round.end.file-magic"


	# Different types of data to test
	test:
		patterns: [{
			name: "meta.data-test.file-magic"
			match: """(?x) (?<=\\t|\\x20)
				
				(?# Type of test being performed)
				(u?(?:byte|short|long|quad|float|double|string|pstring|date|qdate|ldate
				|qldate|qwdate|beid3|beshort|belong|bequad|befloat|bedouble|bedate|beqdate
				|beldate|beqldate|beqwdate|bestring16|leid3|leshort|lelong|lequad|lefloat
				|ledouble|ledate|leqdate|leldate|leqldate|leqwdate|lestring16|melong|medate
				|meldate)|clear|default|indirect|name|regex|search|use)
				
				(?# Possible type specification)
				(?:\\s*(/)([BCHJLTWbchlstw0-9]*)|\\s*([=<>&^~!])\\s*((?:0x)?[A-Fa-f\\d]+))?
				
				(?# Test criteria)
				(?:\\s+((x(?=\\s))|((?:[^\\s\\\\]|\\\\.)+)(?=$|(?:\\t+|\\x20{2,})\\S)))?
			"""
			captures:
				1: name: "entity.type.data-test.file-magic"
				2: name: "keyword.operator.specifier.file-magic"
				3: name: "storage.modifier.specifier.file-magic"
				4: name: "keyword.operator.logical.file-magic"
				5: patterns: [include: "#injectables"]
				6: name: "variable.parameter.data-test.file-magic"
				7: name: "keyword.operator.wildcard.file-magic"
				8: patterns: [include: "#injectables"]
		},{
			match: "(?:\\t+|\\x20{2,})((?:[^\\s\\\\]|\\\\.|\\x20(?=\\S))+)\\s*$"
			captures:
				1:
					name: "string.quoted.double.file-magic"
					patterns: [
						{include: "source.c#string_placeholder"}
						{include: "#escape"}
					]
		}]

	operator:
		name: "keyword.operator.logical.file-magic"
		match: "[=<>&^~!]"

	
	injectables:
		patterns: [
			{include: "#operator"}
			{include: "#escape"}
			{include: "#number"}
		]
